import Table from "../models/TableModel.js";
import Booking from "../models/BookingModel.js";
import TableBlock from "../models/TableBlockModel.js";
import mongoose from "mongoose";
import { sendConfirmationEmail } from "../services/mailService.js";
export const createTable = async (req, res) => {
  try {
    if (req.user?.id) {
    }
    const table = await Table.create({
      ...req.body,
      createdBy: req.user?.id,
      updatedBy: req.user?.id,
    });
    res.status(201).json(table);
  } catch (err) {
    console.error("Error createTable:", err.message);
    if (err.code === 11000) {
      return res
        .status(409)
        .json({ message: "Table number already exists in restaurant" });
    }
    res
      .status(400)
      .json({ message: "Create table failed", error: err.message });
  }
};

export const updateTable = async (req, res) => {
  try {
    const { id } = req.params;
    if (req.user?.id) {
    }
    const updated = await Table.findByIdAndUpdate(
      id,
      { ...req.body, updatedBy: req.user?.id },
      { new: true, runValidators: true }
    );
    if (!updated) return res.status(404).json({ message: "Table not found" });
    res.json(updated);
  } catch (err) {
    console.error("Error updateTable:", err.message);
    if (err.code === 11000) {
      return res
        .status(409)
        .json({ message: "Table number already exists in restaurant" });
    }
    res
      .status(400)
      .json({ message: "Update table failed", error: err.message });
  }
};

export const deleteTable = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra b√†n c√≥ booking ƒëang ho·∫°t ƒë·ªông kh√¥ng
    const activeBooking = await Booking.exists({
      tableId: id,
      status: { $in: ["pending", "confirmed", "seated"] },
    });

    if (activeBooking) {
      return res.status(409).json({
        message: "Kh√¥ng th·ªÉ x√≥a b√†n v√¨ ƒëang c√≥ booking ho·∫°t ƒë·ªông.",
      });
    }

    // Ki·ªÉm tra b√†n c√≥ b·ªã kh√≥a kh√¥ng
    const hasBlock = await TableBlock.exists({ tableId: id });
    if (hasBlock) {
      return res.status(409).json({
        message: "Kh√¥ng th·ªÉ x√≥a b√†n v√¨ b√†n ƒëang b·ªã kh√≥a.",
      });
    }

    // Ch·ªâ x√≥a c√°c booking ƒë√£ h·ªßy ho·∫∑c ho√†n th√†nh
    await Booking.deleteMany({
      tableId: id,
      status: { $in: ["cancelled", "completed"] },
    });

    // X√≥a block n·∫øu c√≥
    await TableBlock.deleteMany({ tableId: id });

    // X√≥a b√†n
    const deleted = await Table.findByIdAndDelete(id);
    if (!deleted)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n." });

    res.json({ message: "X√≥a b√†n th√†nh c√¥ng." });
  } catch (err) {
    console.error("Error deleteTable:", err.message);
    res.status(400).json({ message: "Delete table failed", error: err.message });
  }
};



export const listTablesWithStatus = async (req, res) => {
  try {
    const { restaurantId, date } = req.query;


    // Validate restaurantId if provided
    if (restaurantId && restaurantId === "undefined") {
      return res
        .status(400)
        .json({ message: "Invalid restaurantId parameter" });
    }

    const filter = {};
    if (restaurantId && restaurantId !== "undefined") {
      if (!mongoose.Types.ObjectId.isValid(restaurantId)) {
        return res.status(400).json({ message: "Invalid restaurantId parameter" });
      }
      filter.restaurantId = restaurantId;
    }


    const tables = await Table.find(filter).lean();
    if (!tables.length) return res.json([]);

    // üïì X√°c ƒë·ªãnh ng√†y ƒë∆∞·ª£c ch·ªçn ho·∫∑c h√¥m nay
    const today = new Date().toISOString().slice(0, 10);
    const normalizedDate =
      date && date.length === 10 ? date : date ? date.slice(0, 10) : today;

    const tableIds = tables.map((t) => t._id);

    // üîé Ch·ªâ l·∫•y booking + block trong NG√ÄY ƒê√ì
    const [bookings, blocks] = await Promise.all([
      Booking.find({
        tableId: { $in: tableIds },
        date: normalizedDate,
      }).lean(),
      TableBlock.find({
        tableId: { $in: tableIds },
        date: normalizedDate,
      }).lean(),
    ]);


    const reservedSet = new Set(
      bookings
        .filter((b) => ["pending", "confirmed"].includes(b.status))
        .map((b) => String(b.tableId))
    );

    const occupiedSet = new Set(
      bookings
        .filter((b) => b.status === "seated")
        .map((b) => String(b.tableId))
    );

    const blockedSet = new Set(blocks.map((b) => String(b.tableId)));


    // T√≠nh tr·∫°ng th√°i b√†n d·ª±a tr√™n booking/block trong ng√†y ƒë∆∞·ª£c ch·ªçn
    const result = tables.map((t) => {
      let computedStatus = "available"; // M·∫∑c ƒë·ªãnh l√† available cho m·ªçi ng√†y
      let bookingInfo = null;
      let blockedInfo = null;

      // T√¨m booking cho b√†n n√†y trong ng√†y ƒë∆∞·ª£c ch·ªçn
      const tableBooking = bookings.find(b => String(b.tableId) === String(t._id));
      const tableBlock = blocks.find(b => String(b.tableId) === String(t._id));

      // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ booking/block trong ng√†y ƒë∆∞·ª£c ch·ªçn
      if (blockedSet.has(t._id.toString())) {
        computedStatus = "blocked";
        blockedInfo = tableBlock;
      } else if (occupiedSet.has(t._id.toString())) {
        computedStatus = "occupied";
        bookingInfo = tableBooking;
      } else if (reservedSet.has(t._id.toString())) {
        computedStatus = "reserved";
        bookingInfo = tableBooking;
      }
      // N·∫øu kh√¥ng c√≥ booking/block n√†o trong ng√†y n√†y, b√†n s·∫Ω tr·ªëng
      else {
        computedStatus = "available";
      }

      const resultTable = {
        _id: String(t._id),
        id: String(t._id),
        restaurantId: String(t.restaurantId),
        tableNumber: t.tableNumber,
        capacity: t.capacity,
        type: t.type,
        status: computedStatus,
        updatedAt: t.updatedAt,
        createdAt: t.createdAt,
        bookingDate: normalizedDate, // Th√™m ng√†y ƒë∆∞·ª£c ch·ªçn
      };

      // Th√™m th√¥ng tin booking n·∫øu c√≥
      if (bookingInfo) {
        resultTable.blockedBy = `${bookingInfo.customerName} - ${bookingInfo.time}`;
        resultTable.checkInTime = bookingInfo.time;
        resultTable.orderId = bookingInfo._id;
      }

      // Th√™m th√¥ng tin block n·∫øu c√≥
      if (blockedInfo) {
        resultTable.blockedBy = blockedInfo.reason || 'B·∫£o tr√¨';
      }

      return resultTable;
    });

    res.json(result);
  } catch (err) {
    console.error("Error listTablesWithStatus:", err.message);
    res.status(500).json({ message: "Server error", error: err.message });
  }
};

export const updateTableStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      status,
      date,
      customerName,
      customerEmail,
      customerPhone,
      adults,
      children,
      time,
    } = req.body;
    const allowed = ["available", "reserved", "occupied", "blocked"];

    if (!allowed.includes(status)) {
      return res.status(400).json({ message: "Invalid table status" });
    }

    const targetDate = date || new Date().toISOString().slice(0, 10);

    // Ki·ªÉm tra b√†n c√≥ t·ªìn t·∫°i kh√¥ng
    const table = await Table.findById(id);
    if (!table) return res.status(404).json({ message: "Table not found" });

    // üî• N·∫øu staff ƒë·ªïi sang "available" ‚Üí h·ªßy t·∫•t c·∫£ booking trong NG√ÄY ƒë√≥
    if (status === "available") {
      const cancelled = await Booking.updateMany(
        {
          tableId: id,
          date: targetDate,
          status: { $in: ["pending", "confirmed", "seated"] },
        },
        { $set: { status: "cancelled", updatedAt: new Date() } }
      );

      // X√≥a t·∫•t c·∫£ block trong ng√†y ƒë√≥
      await TableBlock.deleteMany({
        tableId: id,
        date: targetDate,
      });
    }

    // üÜï N·∫øu staff ƒë·ªïi sang "occupied" ‚Üí c·∫≠p nh·∫≠t booking th√†nh "seated"
    if (status === "occupied") {
      // T√¨m booking "confirmed" cho b√†n n√†y trong ng√†y ƒë∆∞·ª£c ch·ªçn
      const confirmedBooking = await Booking.findOne({
        tableId: id,
        date: targetDate,
        status: "confirmed",
      });

      if (confirmedBooking) {
        // C·∫≠p nh·∫≠t booking th√†nh "seated"
        await Booking.findByIdAndUpdate(confirmedBooking._id, {
          status: "seated",
          updatedAt: new Date(),
          updatedBy: req.user?.id,
        });
      }
    }

    // üÜï N·∫øu staff ƒë·ªïi sang "blocked" ‚Üí t·∫°o block cho ng√†y ƒë√≥
    if (status === "blocked") {
      // X√≥a block c≈© n·∫øu c√≥
      await TableBlock.deleteMany({
        tableId: id,
        date: targetDate,
      });

      // T·∫°o block m·ªõi
      await TableBlock.create({
        restaurantId: table.restaurantId,
        tableId: id,
        date: targetDate,
        time: "00:00", // Th·ªùi gian m·∫∑c ƒë·ªãnh cho block c·∫£ ng√†y
        reason: "B·∫£o tr√¨",
        createdBy: req.user?.id,
      });
    }

    // üÜï N·∫øu staff ƒë·ªïi sang "reserved" ‚Üí t·∫°o/c·∫≠p nh·∫≠t booking v·ªõi th√¥ng tin kh√°ch v√† g·ª≠i mail
    if (status === "reserved") {
      // X√≥a block n·∫øu c√≥
      await TableBlock.deleteMany({
        tableId: id,
        date: targetDate,
      });

      // T√¨m booking hi·ªán t·∫°i trong ng√†y
      const existingBooking = await Booking.findOne({
        tableId: id,
        date: targetDate,
        status: { $in: ["pending", "confirmed"] },
      });

      const slotTime = time || existingBooking?.time || "12:00";

      if (existingBooking) {
        // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch v√† x√°c nh·∫≠n
        await Booking.findByIdAndUpdate(existingBooking._id, {
          customerName: customerName || existingBooking.customerName || "Kh√°ch l·∫ª",
          customerPhone: customerPhone || existingBooking.customerPhone || "0000000000",
          // Kh√¥ng bao gi·ªù set guest@restaurant.com; n·∫øu kh√¥ng c√≥ email th√¨ b·ªè qua (kh√¥ng g·ª≠i mail)
          ...(customerEmail ? { customerEmail } : {}),
          adults: typeof adults === "number" ? adults : (existingBooking.adults ?? 1),
          children: typeof children === "number" ? children : (existingBooking.children ?? 0),
          time: slotTime,
          status: "confirmed",
          updatedBy: req.user?.id,
          updatedAt: new Date(),
        });
      } else {
        // Ki·ªÉm tra xem c√≥ booking c≈© (cancelled/completed/no_show) c√πng slot th·ªùi gian kh√¥ng
        const oldBooking = await Booking.findOne({
          tableId: id,
          date: targetDate,
          time: slotTime,
        });

        if (oldBooking && ["cancelled", "completed", "no_show"].includes(oldBooking.status)) {
          // T√°i s·ª≠ d·ª•ng booking c≈© v·ªõi th√¥ng tin kh√°ch h√†ng t·ª´ form
          await Booking.findByIdAndUpdate(oldBooking._id, {
            customerName: customerName || oldBooking.customerName || "Kh√°ch l·∫ª",
            customerPhone: customerPhone || oldBooking.customerPhone || "0000000000",
            ...(customerEmail ? { customerEmail } : {}),
            adults: typeof adults === "number" ? adults : (oldBooking.adults ?? 1),
            children: typeof children === "number" ? children : (oldBooking.children ?? 0),
            time: slotTime,
            status: "confirmed",
            updatedBy: req.user?.id,
            updatedAt: new Date(),
          });
        } else if (!oldBooking) {
          // T·∫°o booking m·ªõi v·ªõi th√¥ng tin kh√°ch h√†ng t·ª´ form
          await Booking.create({
            restaurantId: table.restaurantId,
            tableId: id,
            date: targetDate,
            time: slotTime,
            customerName: customerName || "Kh√°ch l·∫ª",
            customerPhone: customerPhone || "0000000000",
            ...(customerEmail ? { customerEmail } : {}),
            adults: typeof adults === "number" ? adults : 1,
            children: typeof children === "number" ? children : 0,
            status: "confirmed",
            createdBy: req.user?.id,
          });
        }
      }

      // L·∫•y booking cu·ªëi c√πng ƒë·ªÉ g·ª≠i email x√°c nh·∫≠n n·∫øu email h·ª£p l·ªá
      const finalBooking = await Booking.findOne({
        tableId: id,
        date: targetDate,
        time: slotTime,
        status: "confirmed",
      }).lean();

      if (finalBooking?.customerEmail) {
        await sendConfirmationEmail(finalBooking.customerEmail, {
          customerName: finalBooking.customerName,
          date: finalBooking.date,
          time: finalBooking.time,
          tableNumber: table.tableNumber,
          guestCount: (finalBooking.adults ?? 0) + (finalBooking.children ?? 0),
        });
      }
    }

    // Tr·∫£ v·ªÅ th√¥ng tin b√†n v·ªõi tr·∫°ng th√°i ƒë∆∞·ª£c t√≠nh to√°n l·∫°i
    res.json({
      message: "Table status updated successfully for the selected date",
      table: {
        _id: table._id,
        id: String(table._id),
        restaurantId: String(table.restaurantId),
        tableNumber: table.tableNumber,
        capacity: table.capacity,
        type: table.type,
        status: status,
        bookingDate: targetDate,
      },
    });
  } catch (err) {
    console.error("Error updateTableStatus:", err.message);
    res
      .status(400)
      .json({ message: "Update table status failed", error: err.message });
  }
};
